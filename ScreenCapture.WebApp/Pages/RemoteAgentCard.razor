@if(Agent == null)
{
    //TODO bad configuration card
}
else
{
    <div class="card" style="width: 18rem;">
        <i class="card-img-top bi bi-display fs-1"></i>
        <div class="card-body">
            <h6 class="card-title">@Agent.Label</h6>
            <i class="bi bi-record-fill @GetStatusColor()"></i> @Agent.Status.ToString()

            @if (Agent.Status == RemoteAgentStatus.Offline && Agent.LastOnline != null)
            {
                <p class="card-text">Last seen on line: '@Agent.LastOnline.ToString()'</p>
            }
        </div>
        <div class="card-body">
            @if (Agent.Status == RemoteAgentStatus.Recording)
            {
                <button class="btn btn-secondary me-1" @onclick="Agent.StopRecordingAsync" disabled="@IsDisabled()"><i class="bi bi-stop-fill"></i></button>
            }
            else
            {
                <button class="btn btn-secondary me-1" @onclick="Agent.StartRecordingAsync" disabled="@IsDisabled()"><i class="bi bi-record"></i></button>
            }
            <button class="btn btn-secondary ms-1" @onclick="Agent.TakeScreenshotAsync" disabled="@IsDisabled()"><i class="bi bi-camera"></i></button>
        </div>
    </div>
}

@code {
    private bool IsDisabled() => Agent?.Status == RemoteAgentStatus.Offline ? true : false;

    [Parameter] public IRemoteAgent? Agent { get; set; }

    private string GetStatusColor()
    {
        switch (Agent?.Status)
        {
            case(RemoteAgentStatus.Online):
                return "text-success";
            case (RemoteAgentStatus.Recording):
                return "text-danger";
            case (RemoteAgentStatus.Offline):
            default:
                return "text-dark";
        }
    }
}
