@page "/Gallery/Screenshot"

@using Core.Domain;
@using ScreenCapture.WebApp.Services.Interfaces;
@inject IMediaExplorer explorer

<PageTitle>Screenshots Gallery</PageTitle>

<div class="d-flex flex-row">
    <CollectionGridDisplayer Collection="mediaInfoCollection">
        <EmptyCollectionTemplate>
            @if (firstLoading)
            {
                <div class="container text-center">
                    <div class="spinner-border ms-auto text-secondary" role="status" aria-hidden="true"></div>
                </div>
            }
            else
            {
                <div class="container text-center">
                    <text>No screenshot has been found.</text>
                </div>
            }
        </EmptyCollectionTemplate>
        <CollectionItemTemplate>
            <ImageDisplayer Info="@context" OnClick="OpenZoomedImage" />
        </CollectionItemTemplate>
    </CollectionGridDisplayer>

    <MediaFilter OnApplyFilter="FilterMediaCollection" />
</div>

<PageNavigationBar OnPageItemClick="ChangePage" PageCount="@pageCount" />

<ModalContainer @ref="modal" FullScreen="true">
    <HeaderTemplate>
        @if (zoomedImage != null)
        {
            <text><strong>@zoomedImage.Metadata?.CaptureMachine</strong>: @zoomedImage.Name</text>
        }
    </HeaderTemplate>
    <BodyTemplate>
        @if (zoomedImage != null)
        {
            <div id="carousel" class="carousel slide text-center">
                <div class="carousel-inner">
                    @foreach (var mediaInfo in mediaInfoCollection)
                    {
                        <div class="carousel-item @(mediaInfo == zoomedImage ? "active" : string.Empty)">
                            <img src="/media/screenshot/@mediaInfo.Name" alt="@mediaInfo.Name" style="max-width: 100%; max-height: 90vh; margin:auto;" />
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true" style="filter:invert(50%)"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true" style="filter:invert(50%)"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        }
    </BodyTemplate>
</ModalContainer>

@code {
    private const int pagesize = 16;
    private List<MediaInfo<Metadata>> mediaInfoCollection = new List<MediaInfo<Metadata>>(pagesize);
    private int pageCount = 1;
    private MediaInfo<Metadata>? zoomedImage;
    private ModalContainer? modal;
    MediaFilter.FilterArgs? filterArgs;
    private bool firstLoading = true;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            await ChangePage(0);
            firstLoading = false;
        }
    }

    private async Task ChangePage(int pageNumber)
    {
        mediaInfoCollection.Clear();

        var screenshots = await explorer.FindStoredScreenshots();
        pageCount = (int)Math.Ceiling(((decimal)screenshots.Length) / pagesize);

        // we use the padding to keep the loop going in case we have to discard some media
        int padding = 0;
        for (int i = pageNumber; i < (pagesize * (pageNumber + 1) + padding) && i < screenshots.Length; i++)
        {
            var info = await explorer.GetScreenshotInformation(screenshots[i]);

            // check that info are valid and match the filter (if any)
            if (info == null || (filterArgs != null && !MatchFilter(info, filterArgs)))
            {
                padding++;
                continue;
            }

            mediaInfoCollection.Add(info);
        }

        StateHasChanged();
    }

    private bool MatchFilter(MediaInfo<Metadata> info, MediaFilter.FilterArgs filterArgs)
    {
        bool match = true;

        if (!string.IsNullOrWhiteSpace(filterArgs.MediaName))
        {
            if (string.IsNullOrWhiteSpace(info.Name))
            {
                return false;
            }

            match &= info.Name.ToLowerInvariant().StartsWith(filterArgs.MediaName.Trim().ToLowerInvariant());
        }

        if (!string.IsNullOrWhiteSpace(filterArgs.MachineName))
        {
            if (string.IsNullOrWhiteSpace(info.Metadata?.CaptureMachine))
            {
                return false;
            }

            match &= info.Metadata.CaptureMachine.ToLowerInvariant().StartsWith(filterArgs.MachineName.Trim().ToLowerInvariant());
        }

        if (!string.IsNullOrWhiteSpace(filterArgs.MediaType))
        {
            if (string.IsNullOrWhiteSpace(info.Metadata?.Type))
            {
                return false;
            }

            match &= info.Metadata.Type.ToLowerInvariant().StartsWith(filterArgs.MediaType.Trim().ToLowerInvariant());
        }

        if (filterArgs.BeginDateTimeRange != null)
        {
            if (info.Metadata?.CreationDateTime == null)
            {
                return false;
            }

            match &= info.Metadata.CreationDateTime >= filterArgs.BeginDateTimeRange;
        }

        if (filterArgs.EndDateTimeRange != null)
        {
            if (info.Metadata?.CreationDateTime == null)
            {
                return false;
            }

            match &= info.Metadata.CreationDateTime <= filterArgs.EndDateTimeRange;
        }
        return match;
    }

    private async Task OpenZoomedImage(MediaInfo<Metadata>? info)
    {
        if (info == null || modal == null)
        {
            return;
        }

        zoomedImage = info;
        await modal.Show();
    }

    private Task FilterMediaCollection(MediaFilter.FilterArgs args)
    {
        filterArgs = args;
        return ChangePage(0);
        //TODO update pageCount
    }
}
