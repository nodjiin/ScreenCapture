@page "/Settings"
@using Core.Configurations;
@using Microsoft.Extensions.Options;
@inject IOptions<List<SettingsGroupConfiguration>> settingsGroupsOption;

<PageTitle>Settings</PageTitle>

@if(settingsGroups == null || settingsGroups.Count == 0)
{
    <text>No configuration setting is currently available.</text>
}
else
{
    <div class="container mt-4">
        <div class="form-outline mb-4">
            <input type="search" id="input-search" class="form-control" placeholder="Search" aria-label="Search" @oninput="FilterSettings"/>
        </div>

        @foreach(var group in settingsGroups)
        {
            <div class="mt-2">
                <CascadingValue Value="childComponents">
                    <SettingsGroupDisplayer Group="group"/>
                </CascadingValue>
            </div>
        }

        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4 mb-5">
            <button class="btn btn-primary me-md-2" type="button" @onclick="OnConfirmButtonClick">Confirm</button>
            <button class="btn btn-secondary" type="button" @onclick="OnCancelButtonClick">Cancel</button>
        </div>
    </div>
}

@code {
    [CascadingParameter] public NotificationComponent? Notification { get; set; }
    private List<SettingsGroupConfiguration>? settingsGroups;

    // Each group subscribe to this list, and each setting subscribe to a list contained
    // in the group parent. In this way I have the complete component tree to manipulate.
    // I might being stretching the relation between components in this way, maybe passing down a vm item
    // (even accounting for repeated information) would be a cleaner solution.
    private List<SettingsGroupDisplayer> childComponents = new();

    protected override void OnInitialized()
    {
        settingsGroups = settingsGroupsOption.Value;
        base.OnInitialized();
    }

    public async Task OnConfirmButtonClick()
    {
        foreach (var setting in childComponents.SelectMany(group => group.ChildComponents))
        {
            await setting.SaveValueInLocalStorage();
        }

        if (Notification != null)
        {
            await Notification.RaiseNotification("Settings have been updated", NotificationLevel.Information);
        }
    }

    public async Task OnCancelButtonClick()
    {
        foreach (var setting in childComponents.SelectMany(group => group.ChildComponents))
        {
            await setting.ReloadValueInLocalStorage();
        }

        if (Notification != null)
        {
            await Notification.RaiseNotification("Settings have been reloaded", NotificationLevel.Information);
        }
    }

    // TODO very basic search functionality lacking highlight, search in the description and so on. Improve one day.
    public void FilterSettings(ChangeEventArgs e)
    {
        var searchString = Convert.ToString(e?.Value);
        if (string.IsNullOrEmpty(searchString) || searchString.Length < 3)
        {
            foreach(var setting in childComponents.SelectMany(group => group.ChildComponents).Where(s => s != null))
            {
                setting.Show();
            }
            return;
        }

        foreach (var setting in childComponents.SelectMany(group => group.ChildComponents).Where(s => s != null))
        {
            if (setting.Name.ToLower().Contains(searchString.ToLower()))
            {
                setting.Show();
            }
            else
            {
                setting.Hide();
            }
        }
    }
}
