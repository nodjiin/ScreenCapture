@page "/Gallery/Video"

@* TODO evaluate the possible extraction of a common gallery component to use both in this page and in screenshotgallery *@

@using Core.Domain;
@using ScreenCapture.WebApp.Services.Interfaces;
@inject IMediaExplorer explorer

<PageTitle>Video Gallery</PageTitle>

<div class="d-flex flex-row">
    <CollectionGridDisplayer Collection="mediaInfoCollection">
        <EmptyCollectionTemplate>
            @if (firstLoading)
            {
                <div class="container text-center">
                    <div class="spinner-border ms-auto text-secondary" role="status" aria-hidden="true"></div>
                </div>
            }
            else
            {
                <div class="container text-center">
                    <text>No recorded video has been found.</text>
                </div>
            }
        </EmptyCollectionTemplate>
        <CollectionItemTemplate>
            <VideoDisplayer Info="@context" />
        </CollectionItemTemplate>
    </CollectionGridDisplayer>

    <MediaFilter OnApplyFilter="FilterMediaCollection" />
</div>

<PageNavigationBar OnPageItemClick="ChangePage" PageCount="@pageCount" />

@code {
    private const int pagesize = 12;    // smaller pagesize than screenshot gallery to outset the larger video displayer dimension
    private List<MediaInfo<VideoMetadata>> mediaInfoCollection = new List<MediaInfo<VideoMetadata>>(pagesize);
    private int pageCount = 1;
    MediaFilter.FilterArgs? filterArgs;
    private bool firstLoading = true;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            await ChangePage(0);
            firstLoading = false;
        }
    }

    private async Task ChangePage(int pageNumber)
    {
        mediaInfoCollection.Clear();
        var screenshots = await explorer.FindStoredVideos();

        int i, padding = 0;
        for (i = pageNumber; i < (pagesize * (pageNumber + 1) + padding) && i < screenshots.Length; i++)
        {
            var info = await explorer.GetVideoInformation(screenshots[i]);

            // check that info are valid and match the filter (if any)
            if (info == null || (filterArgs != null && !MatchFilter(info, filterArgs)))
            {
                padding++;
                continue;
            }

            mediaInfoCollection.Add(info);
        }

        // recompute the pageCount at each call, to update the navigation item in case new elements have been added
        if (filterArgs == null)
        {
            pageCount = (int)Math.Ceiling(((decimal)screenshots.Length) / pagesize);
        }
        else // if we have a filter going we need to finish evaluating the other items to be sure of the precise number of pages
        {
            while (i < screenshots.Length) // iterate on the whole array
            {
                var info = await explorer.GetVideoInformation(screenshots[i]);
                if (info == null || (filterArgs != null && !MatchFilter(info, filterArgs)))
                {
                    padding++;
                }

                i++;
            }

            int filteredScrenshotsCount = i - padding;
            if (filteredScrenshotsCount > 0)
            {
                pageCount = (int)Math.Ceiling(((decimal)filteredScrenshotsCount) / pagesize);
            }
            else
            {
                pageCount = 1;
            }
        }

        StateHasChanged();
    }

    // TODO additional filter like duration.
    private bool MatchFilter(MediaInfo<VideoMetadata> info, MediaFilter.FilterArgs filterArgs)
    {
        bool match = true;

        if (!string.IsNullOrWhiteSpace(filterArgs.MediaName))
        {
            if (string.IsNullOrWhiteSpace(info.Name))
            {
                return false;
            }

            match &= info.Name.ToLowerInvariant().StartsWith(filterArgs.MediaName.Trim().ToLowerInvariant());
        }

        if (!string.IsNullOrWhiteSpace(filterArgs.MachineName))
        {
            if (string.IsNullOrWhiteSpace(info.Metadata?.CaptureMachine))
            {
                return false;
            }

            match &= info.Metadata.CaptureMachine.ToLowerInvariant().StartsWith(filterArgs.MachineName.Trim().ToLowerInvariant());
        }

        if (!string.IsNullOrWhiteSpace(filterArgs.MediaType))
        {
            if (string.IsNullOrWhiteSpace(info.Metadata?.Type))
            {
                return false;
            }

            match &= info.Metadata.Type.ToLowerInvariant().StartsWith(filterArgs.MediaType.Trim().ToLowerInvariant());
        }

        if (filterArgs.BeginDateTimeRange != null)
        {
            if (info.Metadata?.CreationDateTime == null)
            {
                return false;
            }

            match &= info.Metadata.CreationDateTime >= filterArgs.BeginDateTimeRange;
        }

        if (filterArgs.EndDateTimeRange != null)
        {
            if (info.Metadata?.CreationDateTime == null)
            {
                return false;
            }

            match &= info.Metadata.CreationDateTime <= filterArgs.EndDateTimeRange;
        }
        return match;
    }

    private Task FilterMediaCollection(MediaFilter.FilterArgs args)
    {
        filterArgs = args;
        return ChangePage(0);
    }
}
