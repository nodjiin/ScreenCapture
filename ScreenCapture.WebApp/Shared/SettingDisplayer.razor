@using Core.Configurations;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage storage

@if (Setting == null)
{
    <text>The setting has not been configured correctly.</text>
}
else
{
    <div class="mt-4 @(isCollapsed ? "d-none" : string.Empty)">
        <div class="row">
            <div class="col">
                <strong>@Setting.Name</strong>  
            </div>
            <div class="col-auto">
                @switch (Setting.Type)
                {
                    case SettingType.Open:
                        <input type="text" class="form-control shadow-none" @bind-value="Value">
                        break;
                    case SettingType.Fixed:
                        <select class="form-select shadow-none" @bind="Value">
                            @foreach (var possibleValue in Setting.PossibleValues ?? Enumerable.Empty<string>())
                            {
                                <option value="@possibleValue">@possibleValue</option>
                            }
                        </select>
                        break;
                    case SettingType.Boolean:
                    <ToggableSwitch Toggled="@Value" OnToggled="UpdateValue"/>
                        break;
                    default:
                        <i class="bi bi-bug-fill fs-2"></i>
                        break;
                }
            </div>
        </div>
        <div class="row mt-1">
            <p>@Setting.Description</p>
        </div>
    </div>
    <hr class="@(isCollapsed ? "d-none" : string.Empty)" />
}

@code {
    [CascadingParameter] public NotificationComponent? Notification { get; set; }
    [CascadingParameter]
    public List<SettingDisplayer>? SiblingComponents { get; set; }
    [Parameter] public Setting? Setting { get; set; }
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public string Key { get; set; } = string.Empty;
    public string Name { get; set; } = string.Empty;
    private bool isCollapsed;

    protected override void OnInitialized()
    {
        if (Setting == null)
        {
            return;
        }

        Name = Setting.Name;
        Value = Setting.DefaultValue;

        if(SiblingComponents != null)
        {
            SiblingComponents.Add(this);
        }

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (Setting == null)
        {
            return;
        }

        if(first)
        {
            try
            {
                var savedValue = await storage.GetAsync<string>(Key);
                if (savedValue.Success && savedValue.Value != null)
                {
                    this.Value = savedValue.Value;
                    StateHasChanged();
                }
                else
                {
                    await storage.SetAsync(Key, Value);
                }
            }
            catch(Exception)
            {
                if(Notification != null)
                {
                    await Notification.RaiseNotification($"Failed save/load locally stored value of setting: {Key}", NotificationLevel.Warning);
                }
            }
        }

        await base.OnAfterRenderAsync(first);
    }

    public async Task SaveValueInLocalStorage()
    {
        try
        {
            await storage.SetAsync(Key, Value);
        }
        catch (Exception)
        {
            if (Notification != null)
            {
                await Notification.RaiseNotification($"Failed save locally the value of setting: {Key}", NotificationLevel.Error);
            }
        }
    }

    public async Task ReloadValueInLocalStorage()
    {
        try 
        {
            var savedValue = await storage.GetAsync<string>(Key);
            if (savedValue.Success && savedValue.Value != null)
            {
                this.Value = savedValue.Value;
            }
            else
            {
                if (Notification != null)
                {
                    await Notification.RaiseNotification($"Failed retrieve locally stored value of setting: {Key}", NotificationLevel.Error);
                }
            }
        }
        catch (Exception)
        {
            if (Notification != null)
            {
                await Notification.RaiseNotification($"Failed retrieve locally stored value of setting: {Key}", NotificationLevel.Error);
            }
        }
    }

    public void Hide()
    {
        isCollapsed = true;
    }

    public void Show()
    {
        isCollapsed = false;
    }

    private void UpdateValue(string value)
    {
        Value = value;
    }
}
