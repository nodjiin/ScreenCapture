@using Core.Configurations;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage storage

@if (Setting == null)
{
    <text>The setting has not been configured correctly.</text>
}
else
{
    <div>
        <div class="row">
            <div class="col">
                <strong>@Setting.Name</strong>  
            </div>
            <div class="col-auto">
                @if(Setting.PossibleValues != null)
                {
                    <select class="form-select shadow-none" @bind="Value">
                        @foreach(var possibleValue in Setting.PossibleValues)
                        {
                            <option value="@possibleValue">@possibleValue</option>
                        }
                    </select>    
                }
                else
                {
                    <input type="text" class="form-control shadow-none" @bind-value="Value">
                }
            </div>
        </div>
        <div class="row mt-1">
            <p>@Setting.Description</p>
        </div>
    </div>
}

@code {
    [CascadingParameter] public NotificationComponent? Notification { get; set; }
    [CascadingParameter]
    public Dictionary<string, SettingDisplayer>? SiblingComponents { get; set; }
    [Parameter] public Setting? Setting { get; set; }
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public string GroupName { get; set; } = string.Empty;
    private string storageValueName = string.Empty;

    protected override void OnInitialized()
    {
        if (Setting == null)
        {
            return;
        }

        storageValueName = $"{GroupName}:{Setting.Name}";
        Value = Setting.DefaultValue;

        if(SiblingComponents != null)
        {
            SiblingComponents.Add(Setting.Name, this);
        }

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (Setting == null)
        {
            return;
        }

        if(first)
        {
            try
            {
                var savedValue = await storage.GetAsync<string>(storageValueName);
                if (savedValue.Success && savedValue.Value != null)
                {
                    this.Value = savedValue.Value;
                    StateHasChanged();
                }
                else
                {
                    await storage.SetAsync(storageValueName, Value);
                }
            }
            catch(Exception)
            {
                if(Notification != null)
                {
                    await Notification.RaiseNotification($"Failed save/load locally stored value of setting: {storageValueName}", NotificationLevel.Warning);
                }
            }
        }

        await base.OnAfterRenderAsync(first);
    }

    public async Task SaveValueInLocalStorage()
    {
        try
        {
            await storage.SetAsync(storageValueName, Value);
        }
        catch (Exception)
        {
            if (Notification != null)
            {
                await Notification.RaiseNotification($"Failed save locally the value of setting: {storageValueName}", NotificationLevel.Error);
            }
        }
    }

    public async Task ReloadValueInLocalStorage()
    {
        try 
        {
            var savedValue = await storage.GetAsync<string>(storageValueName);
            if (savedValue.Success && savedValue.Value != null)
            {
                this.Value = savedValue.Value;
            }
            else
            {
                if (Notification != null)
                {
                    await Notification.RaiseNotification($"Failed retrieve locally stored value of setting: {storageValueName}", NotificationLevel.Error);
                }
            }
        }
        catch (Exception)
        {
            if (Notification != null)
            {
                await Notification.RaiseNotification($"Failed retrieve locally stored value of setting: {storageValueName}", NotificationLevel.Error);
            }
        }
    }
}
