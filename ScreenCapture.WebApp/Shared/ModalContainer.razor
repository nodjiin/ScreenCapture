@inject IJSRuntime js
<!-- Button trigger modal -->
@*<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
    Launch static backdrop modal
</button>*@

<!-- Modal -->
<div class="modal" id="modal-container" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog @(FullScreen ? "modal-fullscreen" : string.Empty)">
        <div class="modal-content">
            <div class="modal-header text-light">
                @if (HeaderTemplate != null)
                {
                    @HeaderTemplate
                }
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" />
            </div>
            @if (BodyTemplate != null)
            {
                <div class="modal-body">
                    @BodyTemplate
                </div>
            }
            @if (FooterTemplate != null)
            {
                <div class="modal-footer">
                    @FooterTemplate
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public RenderFragment? HeaderTemplate { get; set; }
    [Parameter] public RenderFragment? BodyTemplate { get; set; }
    [Parameter] public RenderFragment? FooterTemplate { get; set; }
    [Parameter] public bool FullScreen { get; set; }

    private IJSObjectReference? module;

    public async Task Show()
    {
        module ??= await js.InvokeAsync<IJSObjectReference>("import", "./Shared/ModalContainer.razor.js");
        await module.InvokeVoidAsync("showModal");
    }

    public async Task Hide()
    {
        module ??= await js.InvokeAsync<IJSObjectReference>("import", "./Shared/ModalContainer.razor.js");
        await module.InvokeVoidAsync("hideModal");
    }
}
