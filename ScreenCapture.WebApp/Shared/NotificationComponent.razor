@using ScreenCapture.WebApp.Services.Implementers;
@inject IJSRuntime js

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

<div class="notification-container">
    <div class="toast align-items-center @GetNotificationColor()" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="4000">
        <div class="d-flex">
            <div class="toast-body text-white">
                @message
            </div>
            <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

@code {
    private IJSObjectReference? module;

    [Parameter] public RenderFragment? ChildContent { get; set; }
    private NotificationLevel level;
    private string message = string.Empty;

    public async Task RaiseNotification(string notificationMessage, NotificationLevel notificationLevel)
    {
        message = notificationMessage;
        level = notificationLevel;
        StateHasChanged();

        module ??= await js.InvokeAsync<IJSObjectReference>("import", "./Shared/NotificationComponent.razor.js");
        await module.InvokeVoidAsync("showToast");
    }

    private string GetNotificationColor()
    {
        switch (level)
        {
            case NotificationLevel.Success:
                return "bg-success";
            case NotificationLevel.Warning:
                return "bg-warning";
            case NotificationLevel.Error:
                return "bg-danger";            
            case NotificationLevel.Information:
                return "bg-info";
            default:
                return "bg-secondary";
        }
    }
}
